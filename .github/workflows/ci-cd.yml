name: CI/CD - Build, Test, Upload Log to Azure

on:
  push:
    branches: [ 'master', 'main' ]
  pull_request:
    branches: [ 'master', 'main' ]
  workflow_dispatch:

env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
      AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
      AZURE_WEBAPP_PLAN: ${{ secrets.AZURE_WEBAPP_PLAN }}
      AZURE_LOCATION: ${{ secrets.AZURE_LOCATION }}
      AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
      AZURE_STORAGE_CONTAINER: ${{ secrets.AZURE_STORAGE_CONTAINER }}
  

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java version
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'microsoft'

      - name: Build with Maven
        run: mvn clean install

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: java-app
          path: '${{ github.workspace }}/target/*.jar'

      
  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout
  
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: java-app
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_3A8797C4CB3C4656B65B34FB82241A5C }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_FD22B0C5825E4693B8B13024329E3E60 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_08EF1A59AA004F0CAA6E7C4835FB47C9 }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'deloittepocai'
          slot-name: 'Production'
          package: '*.jar'

  upload-log:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Upload build log as artifact (optional)
        uses: actions/upload-artifact@v4
        with:
          name: build-devops-log
          path: build-devops.log

      - name: Download build artifact (from build job)
        uses: actions/download-artifact@v4
        with:
          name: java-app
          path: ./artifacts

    # Azure login removed for this upload job to avoid tenant Conditional Access blocking
    # Upload uses AZURE_STORAGE_CONNECTION_STRING to authenticate directly to the storage account.

      - name: Ensure Azure Blob container exists
        env:
          AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
          AZURE_STORAGE_CONTAINER: ${{ secrets.AZURE_STORAGE_CONTAINER }}
        run: |
          az storage container create --name "$AZURE_STORAGE_CONTAINER" --connection-string "$AZURE_STORAGE_CONNECTION_STRING" || true

      - name: Upload artifacts and logs to Azure Blob (always)
        if: always()
        env:
          AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
          AZURE_STORAGE_CONTAINER: ${{ secrets.AZURE_STORAGE_CONTAINER }}
        run: |
          set -e
          echo "Uploading artifacts and logs to container: $AZURE_STORAGE_CONTAINER"

          # batch-upload downloaded artifacts folder (if present)
          if [ -d artifacts ]; then
            az storage blob upload-batch --connection-string "$AZURE_STORAGE_CONNECTION_STRING" --destination "$AZURE_STORAGE_CONTAINER" --source artifacts --overwrite || true
          fi

          # batch-upload target/ if it exists
          if [ -d target ]; then
            az storage blob upload-batch --connection-string "$AZURE_STORAGE_CONNECTION_STRING" --destination "$AZURE_STORAGE_CONTAINER" --source target --overwrite || true
          fi

          # upload any jar files to a run-specific prefix
          PREFIX="artifacts/${{ github.run_id }}"
          for j in artifacts/*.jar target/*.jar ./*.jar; do
            [ -f "$j" ] || continue
            az storage blob upload --connection-string "$AZURE_STORAGE_CONNECTION_STRING" --container-name "$AZURE_STORAGE_CONTAINER" --name "$PREFIX/$(basename "$j")" --file "$j" --overwrite || true
          done

          # upload root-level log files under a pipeline-logs folder
          LOG_PREFIX="pipeline-logs/${{ github.run_id }}"
          for f in ./*.log build-*.log build-devops.log; do
            [ -f "$f" ] || continue
            az storage blob upload --connection-string "$AZURE_STORAGE_CONNECTION_STRING" --container-name "$AZURE_STORAGE_CONTAINER" --name "$LOG_PREFIX/$(basename "$f")" --file "$f" --overwrite || true
          done